{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.2","compilation":{"directory":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48],"program":"C:\\Users\\lemongrab\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","bit_set","C:\\Users\\lemongrab\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bit-set-0.2.0\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=07ec26705352df3a","-C","extra-filename=-07ec26705352df3a","--out-dir","c:\\wamp64\\www\\OpenTill\\CashDrawerController\\target\\rls\\debug\\deps","-L","dependency=c:\\wamp64\\www\\OpenTill\\CashDrawerController\\target\\rls\\debug\\deps","--extern","bit_vec=c:\\wamp64\\www\\OpenTill\\CashDrawerController\\target\\rls\\debug\\deps\\libbit_vec-7a8b5635d57cd6e1.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\lemongrab\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":[99,58,92,119,97,109,112,54,52,92,119,119,119,92,79,112,101,110,84,105,108,108,92,67,97,115,104,68,114,97,119,101,114,67,111,110,116,114,111,108,108,101,114,92,116,97,114,103,101,116,92,114,108,115,92,100,101,98,117,103,92,100,101,112,115,92,108,105,98,98,105,116,95,115,101,116,45,48,55,101,99,50,54,55,48,53,51,53,50,100,102,51,97,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"bit_set","disambiguator":[8100832797366463502,6485464171054702571]},"crate_root":"C:\\Users\\lemongrab\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bit-set-0.2.0\\src","external_crates":[{"file_name":"C:\\Users\\lemongrab\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bit-set-0.2.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[6705738543347906842,13001789898099840383]}},{"file_name":"C:\\Users\\lemongrab\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bit-set-0.2.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[12725718294842734738,2392580767339771513]}},{"file_name":"C:\\Users\\lemongrab\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bit-set-0.2.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[5196481751640084328,11873153277889189690]}},{"file_name":"C:\\Users\\lemongrab\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bit-set-0.2.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11442656662791774127,15017281626549461529]}},{"file_name":"C:\\Users\\lemongrab\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bit-set-0.2.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3982458515613654370,14265172972467353594]}},{"file_name":"C:\\Users\\lemongrab\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bit-set-0.2.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[14908760844466681848,1565620173926287991]}},{"file_name":"C:\\Users\\lemongrab\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bit-set-0.2.0\\src\\lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[13074825006532038484,16119071016749755814]}},{"file_name":"C:\\Users\\lemongrab\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bit-set-0.2.0\\src\\lib.rs","num":8,"id":{"name":"unwind","disambiguator":[13427815216360883382,11899373124384053444]}},{"file_name":"C:\\Users\\lemongrab\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bit-set-0.2.0\\src\\lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[10557191624578376145,15576496344843861502]}},{"file_name":"C:\\Users\\lemongrab\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bit-set-0.2.0\\src\\lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[1510090251379744647,16647348204125516775]}},{"file_name":"C:\\Users\\lemongrab\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bit-set-0.2.0\\src\\lib.rs","num":11,"id":{"name":"bit_vec","disambiguator":[703346333025305285,12558209198885443395]}}],"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":472,"byte_end":41338,"line_start":11,"line_end":1462,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":472,"byte_end":41338,"line_start":11,"line_end":1462,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\lemongrab\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bit-set-0.2.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":38},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":56},{"krate":0,"index":60},{"krate":0,"index":64},{"krate":0,"index":68},{"krate":0,"index":72},{"krate":0,"index":76},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":92},{"krate":0,"index":152},{"krate":0,"index":156},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":160},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":164},{"krate":0,"index":172},{"krate":0,"index":180},{"krate":0,"index":188},{"krate":0,"index":196},{"krate":0,"index":204},{"krate":0,"index":212},{"krate":0,"index":220}],"decl_id":null,"docs":" An implementation of a set using a bit vector as an underlying\n representation for holding unsigned numerical elements.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":50},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3490,"byte_end":3496,"line_start":99,"line_end":99,"column_start":12,"column_end":18},"name":"BitSet","qualname":"::BitSet","value":"BitSet {  }","parent":null,"children":[{"krate":0,"index":33}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":5352,"byte_end":5355,"line_start":179,"line_end":179,"column_start":12,"column_end":15},"name":"new","qualname":"<BitSet<u32>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty `BitSet`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":5331,"byte_end":5340,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":5724,"byte_end":5737,"line_start":195,"line_end":195,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<BitSet<u32>>::with_capacity","value":"fn (nbits: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BitSet` with initially no contents, able to\n hold `nbits` elements without resizing.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":5703,"byte_end":5712,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6412,"byte_end":6424,"line_start":222,"line_end":222,"column_start":12,"column_end":24},"name":"from_bit_vec","qualname":"<BitSet<u32>>::from_bit_vec","value":"fn (bit_vec: BitVec) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BitSet` from the given bit vector.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6391,"byte_end":6400,"line_start":221,"line_end":221,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6506,"byte_end":6516,"line_start":226,"line_end":226,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<BitSet<u32>>::from_bytes","value":"fn (bytes: &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6981,"byte_end":6989,"line_start":245,"line_end":245,"column_start":12,"column_end":20},"name":"capacity","qualname":"<BitSet<B>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the capacity in bits for this bit vector. Inserting any\n element less than this amount will not trigger a resizing.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6960,"byte_end":6969,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":7567,"byte_end":7578,"line_start":265,"line_end":265,"column_start":12,"column_end":23},"name":"reserve_len","qualname":"<BitSet<B>>::reserve_len","value":"fn (&mut self, len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for the given `BitSet` to contain `len` distinct elements. In the case\n of `BitSet` this means reallocations will not occur as long as all inserted elements\n are less than `len`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":8423,"byte_end":8440,"line_start":290,"line_end":290,"column_start":12,"column_end":29},"name":"reserve_len_exact","qualname":"<BitSet<B>>::reserve_len_exact","value":"fn (&mut self, len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves the minimum capacity for the given `BitSet` to contain `len` distinct elements.\n In the case of `BitSet` this means reallocations will not occur as long as all inserted\n elements are less than `len`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":8961,"byte_end":8973,"line_start":314,"line_end":314,"column_start":12,"column_end":24},"name":"into_bit_vec","qualname":"<BitSet<B>>::into_bit_vec","value":"fn (self) -> BitVec<B>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this set to return the underlying bit vector.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":8940,"byte_end":8949,"line_start":313,"line_end":313,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":9329,"byte_end":9336,"line_start":332,"line_end":332,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<BitSet<B>>::get_ref","value":"fn (&self) -> &BitVec<B>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying bit vector.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":9308,"byte_end":9317,"line_start":331,"line_end":331,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":10816,"byte_end":10829,"line_start":385,"line_end":385,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<BitSet<B>>::shrink_to_fit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Truncates the underlying vector to the least length required.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":10795,"byte_end":10804,"line_start":384,"line_end":384,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":11655,"byte_end":11659,"line_start":414,"line_end":414,"column_start":12,"column_end":16},"name":"iter","qualname":"<BitSet<B>>::iter","value":"fn (&self) -> Iter<B>","parent":null,"children":[],"decl_id":null,"docs":" Iterator over each usize stored in the `BitSet`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":11634,"byte_end":11643,"line_start":413,"line_end":413,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":12242,"byte_end":12247,"line_start":435,"line_end":435,"column_start":12,"column_end":17},"name":"union","qualname":"<BitSet<B>>::union","value":"fn <'a> (&'a self, other: &'a Self) -> Union<'a, B>","parent":null,"children":[],"decl_id":null,"docs":" Iterator over each usize stored in `self` union `other`.\n See [union_with](#method.union_with) for an efficient in-place version.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":12221,"byte_end":12230,"line_start":434,"line_end":434,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":13022,"byte_end":13034,"line_start":462,"line_end":462,"column_start":12,"column_end":24},"name":"intersection","qualname":"<BitSet<B>>::intersection","value":"fn <'a> (&'a self, other: &'a Self) -> Intersection<'a, B>","parent":null,"children":[],"decl_id":null,"docs":" Iterator over each usize stored in `self` intersect `other`.\n See [intersect_with](#method.intersect_with) for an efficient in-place version.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":13001,"byte_end":13010,"line_start":461,"line_end":461,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":14140,"byte_end":14150,"line_start":497,"line_end":497,"column_start":12,"column_end":22},"name":"difference","qualname":"<BitSet<B>>::difference","value":"fn <'a> (&'a self, other: &'a Self) -> Difference<'a, B>","parent":null,"children":[],"decl_id":null,"docs":" Iterator over each usize stored in the `self` setminus `other`.\n See [difference_with](#method.difference_with) for an efficient in-place version.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":14119,"byte_end":14128,"line_start":496,"line_end":496,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":15025,"byte_end":15045,"line_start":525,"line_end":525,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<BitSet<B>>::symmetric_difference","value":"fn <'a> (&'a self, other: &'a Self) -> SymmetricDifference<'a, B>","parent":null,"children":[],"decl_id":null,"docs":" Iterator over each usize stored in the symmetric difference of `self` and `other`.\n See [symmetric_difference_with](#method.symmetric_difference_with) for\n an efficient in-place version.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":15004,"byte_end":15013,"line_start":524,"line_end":524,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":15846,"byte_end":15856,"line_start":554,"line_end":554,"column_start":12,"column_end":22},"name":"union_with","qualname":"<BitSet<B>>::union_with","value":"fn (&mut self, other: &Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unions in-place with the specified other bit vector.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":15825,"byte_end":15834,"line_start":553,"line_end":553,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":16423,"byte_end":16437,"line_start":577,"line_end":577,"column_start":12,"column_end":26},"name":"intersect_with","qualname":"<BitSet<B>>::intersect_with","value":"fn (&mut self, other: &Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Intersects in-place with the specified other bit vector.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":16402,"byte_end":16411,"line_start":576,"line_end":576,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":17324,"byte_end":17339,"line_start":609,"line_end":609,"column_start":12,"column_end":27},"name":"difference_with","qualname":"<BitSet<B>>::difference_with","value":"fn (&mut self, other: &Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Makes this bit vector the difference with the specified other bit vector\n in-place.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":17303,"byte_end":17312,"line_start":608,"line_end":608,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":17962,"byte_end":17987,"line_start":633,"line_end":633,"column_start":12,"column_end":37},"name":"symmetric_difference_with","qualname":"<BitSet<B>>::symmetric_difference_with","value":"fn (&mut self, other: &Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Makes this bit vector the symmetric difference with the specified other\n bit vector in-place.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":17941,"byte_end":17950,"line_start":632,"line_end":632,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":20274,"byte_end":20277,"line_start":719,"line_end":719,"column_start":12,"column_end":15},"name":"len","qualname":"<BitSet<B>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of set bits in this set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":20253,"byte_end":20262,"line_start":718,"line_end":718,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":20465,"byte_end":20473,"line_start":725,"line_end":725,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BitSet<B>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether there are no bits set in this set\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":20444,"byte_end":20453,"line_start":724,"line_end":724,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":20587,"byte_end":20592,"line_start":731,"line_end":731,"column_start":12,"column_end":17},"name":"clear","qualname":"<BitSet<B>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears all bits in this set\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":20566,"byte_end":20575,"line_start":730,"line_end":730,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":20735,"byte_end":20743,"line_start":737,"line_end":737,"column_start":12,"column_end":20},"name":"contains","qualname":"<BitSet<B>>::contains","value":"fn (&self, value: &usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this set contains the specified integer.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":20714,"byte_end":20723,"line_start":736,"line_end":736,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":21035,"byte_end":21046,"line_start":745,"line_end":745,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<BitSet<B>>::is_disjoint","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set has no elements in common with `other`.\n This is equivalent to checking for an empty intersection.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":21014,"byte_end":21023,"line_start":744,"line_end":744,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":21218,"byte_end":21227,"line_start":751,"line_end":751,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<BitSet<B>>::is_subset","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a subset of another.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":21197,"byte_end":21206,"line_start":750,"line_end":750,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":21806,"byte_end":21817,"line_start":764,"line_end":764,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<BitSet<B>>::is_superset","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a superset of another.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":21785,"byte_end":21794,"line_start":763,"line_end":763,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":22002,"byte_end":22008,"line_start":770,"line_end":770,"column_start":12,"column_end":18},"name":"insert","qualname":"<BitSet<B>>::insert","value":"fn (&mut self, value: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set. Returns `true` if the value was not already\n present in the set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":22484,"byte_end":22490,"line_start":787,"line_end":787,"column_start":12,"column_end":18},"name":"remove","qualname":"<BitSet<B>>::remove","value":"fn (&mut self, value: &usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes a value from the set. Returns `true` if the value was\n present in the set.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":240},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":23803,"byte_end":23807,"line_start":845,"line_end":845,"column_start":12,"column_end":16},"name":"Iter","qualname":"::Iter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator for `BitSet`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":246},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":23877,"byte_end":23882,"line_start":847,"line_end":847,"column_start":12,"column_end":17},"name":"Union","qualname":"::Union","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":252},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":23961,"byte_end":23973,"line_start":849,"line_end":849,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::Intersection","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":258},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":24058,"byte_end":24068,"line_start":851,"line_end":851,"column_start":12,"column_end":22},"name":"Difference","qualname":"::Difference","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":264},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":24147,"byte_end":24166,"line_start":853,"line_end":853,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::SymmetricDifference","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3561,"byte_end":3567,"line_start":103,"line_end":103,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3685,"byte_end":3691,"line_start":111,"line_end":111,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3824,"byte_end":3830,"line_start":116,"line_end":116,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":4032,"byte_end":4038,"line_start":124,"line_end":124,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":4227,"byte_end":4233,"line_start":133,"line_end":133,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":4380,"byte_end":4386,"line_start":140,"line_end":140,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":4976,"byte_end":4982,"line_start":159,"line_end":159,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":5125,"byte_end":5131,"line_start":166,"line_end":166,"column_start":31,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":5144,"byte_end":5150,"line_start":168,"line_end":168,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6622,"byte_end":6628,"line_start":231,"line_end":231,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":114},{"krate":0,"index":118},{"krate":0,"index":122},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":22704,"byte_end":22710,"line_start":798,"line_end":798,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":23090,"byte_end":23096,"line_start":813,"line_end":813,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":23345,"byte_end":23354,"line_start":828,"line_end":828,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":24256,"byte_end":24265,"line_start":855,"line_end":855,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":25282,"byte_end":25297,"line_start":887,"line_end":887,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":26018,"byte_end":26022,"line_start":913,"line_end":913,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":26245,"byte_end":26250,"line_start":920,"line_end":920,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":26473,"byte_end":26485,"line_start":927,"line_end":927,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":26708,"byte_end":26718,"line_start":934,"line_end":934,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":26941,"byte_end":26960,"line_start":941,"line_end":941,"column_start":36,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3561,"byte_end":3567,"line_start":103,"line_end":103,"column_start":29,"column_end":35},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":50},"to":{"krate":2,"index":2598}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3685,"byte_end":3691,"line_start":111,"line_end":111,"column_start":31,"column_end":37},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":50},"to":{"krate":2,"index":2632}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3824,"byte_end":3830,"line_start":116,"line_end":116,"column_start":43,"column_end":49},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":50},"to":{"krate":2,"index":4490}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":4032,"byte_end":4038,"line_start":124,"line_end":124,"column_start":37,"column_end":43},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":50},"to":{"krate":2,"index":4510}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":4227,"byte_end":4233,"line_start":133,"line_end":133,"column_start":34,"column_end":40},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":50},"to":{"krate":2,"index":2464}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":4380,"byte_end":4386,"line_start":140,"line_end":140,"column_start":27,"column_end":33},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":50},"to":{"krate":2,"index":2446}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":4976,"byte_end":4982,"line_start":159,"line_end":159,"column_start":38,"column_end":44},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":50},"to":{"krate":2,"index":2410}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":5125,"byte_end":5131,"line_start":166,"line_end":166,"column_start":31,"column_end":37},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":50},"to":{"krate":2,"index":2416}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":5144,"byte_end":5150,"line_start":168,"line_end":168,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":50},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6622,"byte_end":6628,"line_start":231,"line_end":231,"column_start":19,"column_end":25},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":50},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":22704,"byte_end":22710,"line_start":798,"line_end":798,"column_start":34,"column_end":40},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":50},"to":{"krate":2,"index":8432}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":23090,"byte_end":23096,"line_start":813,"line_end":813,"column_start":34,"column_end":40},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":50},"to":{"krate":2,"index":8008}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":23345,"byte_end":23354,"line_start":828,"line_end":828,"column_start":22,"column_end":31},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":24256,"byte_end":24265,"line_start":855,"line_end":855,"column_start":39,"column_end":48},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":228},"to":{"krate":2,"index":4316}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":25282,"byte_end":25297,"line_start":887,"line_end":887,"column_start":36,"column_end":51},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":234},"to":{"krate":2,"index":4316}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":26018,"byte_end":26022,"line_start":913,"line_end":913,"column_start":36,"column_end":40},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":240},"to":{"krate":2,"index":4316}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":26245,"byte_end":26250,"line_start":920,"line_end":920,"column_start":36,"column_end":41},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":246},"to":{"krate":2,"index":4316}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":26473,"byte_end":26485,"line_start":927,"line_end":927,"column_start":36,"column_end":48},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":252},"to":{"krate":2,"index":4316}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":26708,"byte_end":26718,"line_start":934,"line_end":934,"column_start":36,"column_end":46},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":258},"to":{"krate":2,"index":4316}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,101,109,111,110,103,114,97,98,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,105,116,45,115,101,116,45,48,46,50,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":26941,"byte_end":26960,"line_start":941,"line_end":941,"column_start":36,"column_end":55},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":264},"to":{"krate":2,"index":4316}}]}